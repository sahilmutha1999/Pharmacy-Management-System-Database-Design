----------------------------------------------------------------------------------------
-- CREATING NEW TABLES
----------------------------------------------------------------------------------------

CREATE TABLE CUSTOMER(
    CUSTOMER_ID VARCHAR(10),
    FIRST_NAME VARCHAR(25),
    LAST_NAME VARCHAR(25),
    GENDER VARCHAR(10),
    CITY VARCHAR(20),
    INSURANCE_BALANCE NUMBER(6,0),  -- Balance available in the insurance account
    INSURANCE_COMPANY VARCHAR(25),  -- Name of the insurance company
    INSURANCE_START_DATE DATE,      -- Start date of insurance coverage
    INSURANCE_END_DATE DATE,        -- End date of insurance coverage
    CONSTRAINT PK_CUSTOMER_ID PRIMARY KEY (CUSTOMER_ID)
);

CREATE TABLE PRESCRIPTION(
    CUSTOMER_ID VARCHAR(10),
    PRES_ID VARCHAR(10),
    PRES_DATE DATE,
    DOC_ID VARCHAR(10),
    CONSTRAINT PK_PRESCRIPTION_ID PRIMARY KEY (PRES_ID),
    CONSTRAINT FK_PRESCRIPTION_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE
);

CREATE TABLE PRESCRIBED_DRUGS(
    PRES_ID VARCHAR(10),
    DRUG_NAME VARCHAR(25),
    QUANTITY NUMBER(3,0),
    CONSTRAINT PK_PRESCRIBED_DRUGS PRIMARY KEY (PRES_ID, DRUG_NAME),
    CONSTRAINT FK_PRESCRIBED_DRUGS_PRESCRIPTION_ID FOREIGN KEY (PRES_ID) REFERENCES PRESCRIPTION(PRES_ID) ON DELETE CASCADE
);

CREATE TABLE ROLE(
    ROLE_ID VARCHAR(10),
    ROLE_NAME VARCHAR(25),
    CONSTRAINT PK_ROLE_ID PRIMARY KEY(ROLE_ID),
    CONSTRAINT CHK_ROLE_NAME CHECK (ROLE_NAME IN ('Admin', 'Cashier', 'Inventory Manager')) -- Restricting entering of Role_name to just these 3 roles
);

CREATE TABLE EMPLOYEE(
    EMP_ID VARCHAR(10),
    FIRST_NAME VARCHAR(25),
    LAST_NAME VARCHAR(25),
    START_DATE DATE,
    END_DATE DATE,
    ROLE_ID VARCHAR(10),
    SALARY NUMERIC(6,0),
    CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMP_ID),
    CONSTRAINT FK_EMPLOYEE_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ROLE_ID) ON DELETE CASCADE
);

CREATE TABLE INVENTORY(
    DRUG_ID VARCHAR(10),
    DRUG_NAME VARCHAR(25),
    MANUFACTURER VARCHAR(25),
    INV_QUANTITY NUMERIC(5,0),
    BUY_DATE DATE,
    EXPIRY_DATE DATE,
    PRICE NUMERIC(5,0),
    THRESHOLD_QUANTITY NUMERIC(5,0),
    RESTOCK_QUANTITY NUMERIC(5,0),
    CONSTRAINT PK_INVENTORY PRIMARY KEY (DRUG_ID)
);

CREATE TABLE ORDER_BILL(
    ORDER_ID VARCHAR(10),
    PRES_ID VARCHAR(10),
    EMP_ID VARCHAR(10),
    CONSTRAINT PK_ORDER_ID PRIMARY KEY (ORDER_ID),
    CONSTRAINT FK_ORDER_BILL_PRESCRIPTION_ID FOREIGN KEY (PRES_ID) REFERENCES PRESCRIPTION(PRES_ID) ON DELETE CASCADE,
    CONSTRAINT FK_ORDER_BILL_EMPLOYEE_ID FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(EMP_ID) ON DELETE CASCADE
);

CREATE TABLE PAYMENT_BILL(
    BILL_ID VARCHAR(10),
    ORDER_ID VARCHAR(10),
    ORDER_DATE DATE,
    TOTAL_AMOUNT NUMERIC(5,0),
    CUSTOMER_PAY NUMERIC(5,0),
    INSURANCE_PAY NUMERIC(10),
    CONSTRAINT PK_PAYMENT_BILL_ID PRIMARY KEY (BILL_ID),
    CONSTRAINT FK_PAYMENT_BILL_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES ORDER_BILL(ORDER_ID) ON DELETE CASCADE
);

CREATE TABLE ORDERED_DRUGS(
    ORDER_ID VARCHAR(10),
    DRUG_ID VARCHAR(10),
    ORDER_QUANTITY NUMBER(5,0),
    CONSTRAINT PK_ORDERED_DRUGS PRIMARY KEY (ORDER_ID, DRUG_ID),
    CONSTRAINT FK_ORDERED_DRUGS_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES ORDER_BILL(ORDER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_ORDERED_DRUGS_DRUG_ID FOREIGN KEY (DRUG_ID) REFERENCES INVENTORY(DRUG_ID) ON DELETE CASCADE
);

CREATE TABLE NOTIFICATION(
    NOTIF_ID VARCHAR(10),
    NOTIF_DATE DATE,
    MESSAGE VARCHAR(100),
    DRUG_ID VARCHAR(10),
    CONSTRAINT PK_NOTIFICATION_ID PRIMARY KEY (NOTIF_ID),
    CONSTRAINT FK_NOTIFICATION_DRUG_ID FOREIGN KEY (DRUG_ID) REFERENCES INVENTORY(DRUG_ID) ON DELETE CASCADE
);

CREATE TABLE EMPLOYEE_NOTIFICATION(
    EMP_NOTIF_ID VARCHAR(15),
    NOTIF_ID VARCHAR(10),
    EMP_ID VARCHAR(10),
    CONSTRAINT PK_EMPLOYEE_NOTIFICATION_ID PRIMARY KEY (EMP_NOTIF_ID),
    CONSTRAINT FK_EMPLOYEE_NOTIFICATION_NOTIF_ID FOREIGN KEY (NOTIF_ID) REFERENCES NOTIFICATION(NOTIF_ID) ON DELETE CASCADE,
    CONSTRAINT FK_EMPLOYEE_NOTIFICATION_EMP_ID FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(EMP_ID) ON DELETE CASCADE
);


-- If rerunning entire script, drop all tables and constraints

-- Procedure to drop foreign key constraints
CREATE OR REPLACE PROCEDURE drop_foreign_key_constraints IS
    v_constraint_exists NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_constraint_exists
    FROM user_constraints
    WHERE constraint_name IN (
        'FK_PRESCRIPTION_CUSTOMER_ID',
        'FK_PRESCRIBED_DRUGS_PRESCRIPTION_ID',
        'FK_EMPLOYEE_ROLE_ID',
        'FK_ORDER_BILL_EMPLOYEE_ID',
        'FK_ORDER_BILL_PRESCRIPTION_ID',
        'FK_ORDERED_DRUGS_DRUG_ID',
        'FK_PAYMENT_BILL_ORDER_ID',
        'FK_PAYMENT_BILL_CUSTOMER_ID',
        'FK_ORDERED_DRUGS_ORDER_ID',
        'FK_NOTIFICATION_DRUG_ID',
        'FK_EMPLOYEE_NOTIFICATION_EMP_ID',
        'FK_EMPLOYEE_NOTIFICATION_NOTIF_ID'
    );

    IF v_constraint_exists > 0 THEN
        -- Drop foreign key constraints using dynamic SQL
        EXECUTE IMMEDIATE 'ALTER TABLE PRESCRIPTION DROP CONSTRAINT FK_PRESCRIPTION_CUSTOMER_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE PRESCRIBED_DRUGS DROP CONSTRAINT FK_PRESCRIBED_DRUGS_PRESCRIPTION_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE EMPLOYEE DROP CONSTRAINT FK_EMPLOYEE_ROLE_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE ORDER_BILL DROP CONSTRAINT FK_ORDER_BILL_EMPLOYEE_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE ORDER_BILL DROP CONSTRAINT FK_ORDER_BILL_PRESCRIPTION_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE PAYMENT_BILL DROP CONSTRAINT FK_PAYMENT_BILL_ORDER_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE PAYMENT_BILL DROP CONSTRAINT FK_PAYMENT_BILL_CUSTOMER_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE ORDERED_DRUGS DROP CONSTRAINT FK_ORDERED_DRUGS_DRUG_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE ORDERED_DRUGS DROP CONSTRAINT FK_ORDERED_DRUGS_ORDER_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE NOTIFICATION DROP CONSTRAINT FK_NOTIFICATION_DRUG_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE EMPLOYEE_NOTIFICATION DROP CONSTRAINT FK_EMPLOYEE_NOTIFICATION_EMP_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE EMPLOYEE_NOTIFICATION DROP CONSTRAINT FK_EMPLOYEE_NOTIFICATION_NOTIF_ID';
    END IF;
END drop_foreign_key_constraints;
/

-- Procedure to drop all tables
CREATE OR REPLACE PROCEDURE drop_all_tables IS
    v_table_count NUMBER;
BEGIN
    -- Check if tables exist
    SELECT COUNT(*)
    INTO v_table_count
    FROM user_tables
    WHERE table_name IN (
        'CUSTOMER',
        'PRESCRIPTION',
        'PRESCRIBED_DRUGS',
        'ORDER_BILL',
        'PAYMENT_BILL',
        'ORDERED_DRUGS',
        'INVENTORY',
        'NOTIFICATION',
        'EMPLOYEE_NOTIFICATION',
        'EMPLOYEE',
        'ROLE'
    );

    -- Drop tables if they exist
    IF v_table_count > 0 THEN
        FOR tab IN (SELECT table_name FROM user_tables WHERE table_name IN (
            'INSURANCE',
            'CUSTOMER',
            'PRESCRIPTION',
            'PRESCRIBED_DRUGS',
            'ORDER_BILL',
            'PAYMENT_BILL',
            'ORDERED_DRUGS',
            'INVENTORY',
            'NOTIFICATION',
            'EMPLOYEE_NOTIFICATION',
            'EMPLOYEE',
            'ROLE'
        )) LOOP
            EXECUTE IMMEDIATE 'DROP TABLE ' || tab.table_name;
        END LOOP;
    END IF;
END drop_all_tables;
/


EXEC drop_foreign_key_constraints;
EXEC drop_all_tables;
